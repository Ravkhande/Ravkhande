You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Input: l1 = [0], l2 = [0]
Output: [0]

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution 
{
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) 
    {
        int sum=0,i=0,j=0,idigit=0,irem=0;
        ListNode *temp1=*l1;
        ListNode *temp2=*l2;
        temp1 =(ListNode*)malloc(sizeof(ListNode));
        temp2=(ListNode*)malloc(sizeof(ListNode));
        temp1->data=l1[0];
        temp2->data=l2[0];
        
        for(i=0,j=0;temp1->next!=NULL || temp2->next!=NULL;i++,j++)
        {
            sum=sum+(temp1->(l1[i])+temp2->(l2[j]));
            temp1=temp1->next;
            temp2=temp2->next;
        }
        
        while(sum!=0)
        {
            idigit=sum%10;
            irem=irem*10+idigit;
            sum=sum/10;
                
        }
        
        if(sum=0)
        {
            cout<<"["<<sum<<"]"<<endl;
        }
        else
        {
            cout<<"["<<sum<<"]"<<endl;
        }
        
            
    }
};